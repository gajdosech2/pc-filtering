/*
  Copyright (C) Skeletex Research, s.r.o. - All Rights Reserved
  Unauthorized copying of this file, via any medium is strictly prohibited
  Proprietary and confidential
*/
#pragma once
#include <vector>

#include <utils/GeometryStructures.h>
#include <GLW/ArrayObject.h>

#include <Visualizer/API.h>



namespace vis
{

  //! List of available names for geometry objects generated by vis::PrimitiveDatabase.
  enum class GeometryName
  {
    //! icosahedron with unit radius
    sphere_s0,
    //! icosahedron with unit radius subdivided once
    sphere_s1,
    //! icosahedron with unit radius subdivided twice
    sphere_s2,
    //! anisotropic thin octahedron laying on x-axis <0,1>
    octahedron,
    //! camera mesh aligned with view space looking to negative z
    camera,
    //! unit sized plane perpendicular to x-axis
    plane_x,
    //! unit sized plane perpendicular to y-axis
    plane_y,
    //! unit sized plane perpendicular to z-axis
    plane_z,
    //! number of available names
    _count
  };

  //! Converts vis::GeometryName type to text reprersentation.
  VIS_API std::string ToString(GeometryName geom);



  //! Holds information about geometry.
  struct Geometry
  {
    //! Identifier name.
    GeometryName name;
    //! Number of vertices which are entering vertex shader.
    uint32_t vertex_count;
    //! Number of rendered faces.
    uint32_t face_count;
    //! Pointer to array buffer object holding OpenGL buffers.
    glw::PArrayObject buffer;
  };



  //! List of available names for primitives generated by vis::PrimitiveDatabase.
  enum class PrimitiveName
  {
    //! unit sized line laying on x-axis
    line,
    //! unit sized spacial basis
    axes,
    //! unit sized 2D square in interval <0,1> with texture coordinates
    square,
    //! number of available names
    _count
  };

  //! Converts vis::PrimitiveName type to text reprersentation.
  VIS_API std::string ToString(PrimitiveName prim);



  /*!
    \brief Database of common mesh primitives. Automatically manages OpenGL resources.
  */
  class VIS_API PrimitiveDatabase
  {
  public:
    PrimitiveDatabase(const PrimitiveDatabase &) = delete;
    static PrimitiveDatabase &GetSingleton();

    //! Request single draw call of a specified primitive.
    void Draw(const PrimitiveName primitive) const;

    //! Request single draw call of a specified geometry.
    void Draw(const GeometryName geom) const;

    //! Request instanced draw call of a specified primitive.
    void DrawInstanced(uint32_t count, const PrimitiveName primitive) const;

    //! Request instanced draw call of a specified geometry.
    void DrawInstanced(uint32_t count, const GeometryName geom) const;

    //! Request pointer to buffer object of primitive with specified name.
    const glw::PArrayObject &Get(const PrimitiveName primitive) const;

    //! Request pointer to geometry object with specified name.
    const Geometry &GetGeometry(const GeometryName geom) const;

    //! Releases all allocated resources from video memory.
    void Free();

    //! Generates sphere with defined radius. Smoothness parameter influences number of sphere segments.
    static glw::PArrayObject GenerateUvSphere(float radius, uint32_t smoothness);

    //! Generates plane at position, with specified size, perpendicular to specified axis.
    static glw::PArrayObject GeneratePlane(const glm::vec3 &position, float sizing, geom::Axis perpandicular_to);

  private:
    PrimitiveDatabase();
    ~PrimitiveDatabase() = default;
    std::vector<glw::PArrayObject> primitives_;
    std::vector<Geometry> geometries_;
  };

}